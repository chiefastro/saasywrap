class RequirementsManager {
    constructor() {
        this.requirements = [];
        this.chatMessages = [];
        this.conversation_history = [];
        this.currentUserId = 'default-user'; // TODO: Replace with actual user authentication
        this.initialContext = {
            requirements: '',
            datasetPath: null,
            datasetName: null
        };
        
        // DOM Elements
        this.requirementsList = document.getElementById('requirements-list');
        this.chatMessages = document.getElementById('requirements-chat');
        this.chatInput = document.getElementById('requirements-chat-input');
        this.addRequirementBtn = document.getElementById('add-requirement-button');
        this.sendBtn = document.querySelector('.send-btn');
        
        // Bind event listeners
        
        // Add keydown event listener for Enter key
        this.chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                const value = this.chatInput.value.trim();
                e.preventDefault();
                if (value) {
                    this.processMessage(value);
                }
            }
        });
        
        // Add click event listener for send button
        this.sendBtn.addEventListener('click', () => {
            const value = this.chatInput.value.trim();
            if (value) {
                this.processMessage(value);
            }
        });
    }

    generateId() {
        return 'req-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    }

    enrichRequirement(req, isNew = false) {
        const now = new Date().toISOString();
        return {
            ...req,
            id: req.id || this.generateId(),
            dateModified: now,
            dateAdded: req.dateAdded || now,
            createdBy: req.createdBy || this.currentUserId,
            changeHistory: req.changeHistory || [{
                type: 'created',
                timestamp: now,
                userId: this.currentUserId,
                details: isNew ? 'Requirement created by user' : 'Requirement generated by AI'
            }]
        };
    }
    
    async initialize(initialRequirements, initialDataset) {
        try {
            let response;
            this.initialContext.requirements = initialRequirements;

            // Add initial requirements as first message in chat
            if (initialRequirements) {
                this.addUserMessage("Initial Requirements:\n" + initialRequirements);
            }

            // Show typing indicator before API call
            this.showTypingIndicator();

            if (initialDataset) {
                const formData = new FormData();
                formData.append('dataset', initialDataset);
                formData.append('requirements', initialRequirements);
                
                // Store dataset info
                this.initialContext.datasetName = initialDataset.name;
                
                response = await fetch('/api/generate-requirements', {
                    method: 'POST',
                    body: formData
                });
            } else {
                response = await fetch('/api/generate-requirements', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        requirements: initialRequirements
                    })
                });
            }
            
            const data = await response.json();
            
            // Hide typing indicator before showing response
            this.hideTypingIndicator();
            
            // Enrich the requirements with metadata
            this.requirements = data.requirements.map(req => this.enrichRequirement(req));
            this.renderRequirements();
            
            // Add AI's response
            if (data.response) {
                this.addAgentMessage(data.response);
            }

            // Store the dataset path if returned from backend
            if (data.datasetPath) {
                this.initialContext.datasetPath = data.datasetPath;
            }
        } catch (error) {
            // Hide typing indicator on error
            this.hideTypingIndicator();
            console.error('Error generating requirements:', error);
            this.addAgentMessage('Sorry, there was an error generating the requirements. Please try again.');
        }
    }

    renderRequirements() {
        this.requirementsList.innerHTML = '';
        this.requirements.forEach(req => {
            const reqElement = this.createRequirementElement(req);
            this.requirementsList.appendChild(reqElement);
        });
        
        // Scroll to the bottom of the requirements list
        this.requirementsList.scrollTop = this.requirementsList.scrollHeight;
    }

    createRequirementElement(req) {
        const container = document.createElement('div');
        container.className = 'requirement-container';
        container.innerHTML = `
            <div class="requirement-content">
                <div class="requirement-header">
                    <div class="requirement-title" contenteditable="true">${req.title}</div>
                    <div class="requirement-meta">
                        <select class="importance-select">
                            <option value="low" ${req.importance === 'low' ? 'selected' : ''}>Low</option>
                            <option value="medium" ${req.importance === 'medium' ? 'selected' : ''}>Medium</option>
                            <option value="high" ${req.importance === 'high' ? 'selected' : ''}>High</option>
                        </select>
                        <select class="category-select">
                            <option value="frontend" ${req.category === 'frontend' ? 'selected' : ''}>Frontend</option>
                            <option value="backend" ${req.category === 'backend' ? 'selected' : ''}>Backend</option>
                            <option value="database" ${req.category === 'database' ? 'selected' : ''}>Database</option>
                            <option value="uncategorized" ${req.category === 'uncategorized' ? 'selected' : ''}>Uncategorized</option>
                        </select>
                        <button class="history-btn">History</button>
                    </div>
                </div>
                <div class="requirement-description" contenteditable="true">${req.description}</div>
                <div class="requirement-tags">
                    <div class="tags-list">
                        ${req.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                    </div>
                    <input type="text" class="tag-input" placeholder="Add tag...">
                </div>
                <div class="requirement-footer">
                    <span class="requirement-date">Modified: ${new Date(req.dateModified).toLocaleDateString()}</span>
                    <span class="requirement-author">Created by: ${req.createdBy}</span>
                </div>
                <div class="change-history hidden">
                    <h4>Change History</h4>
                    <div class="history-list">
                        ${req.changeHistory.map(change => `
                            <div class="history-item">
                                <span class="history-type">${change.type}</span>
                                <span class="history-details">${change.details}</span>
                                <span class="history-time">${new Date(change.timestamp).toLocaleString()}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            <button class="delete-requirement">Ã—</button>
        `;

        // Add event listeners
        const titleEl = container.querySelector('.requirement-title');
        const descEl = container.querySelector('.requirement-description');
        const importanceSelect = container.querySelector('.importance-select');
        const categorySelect = container.querySelector('.category-select');
        const tagInput = container.querySelector('.tag-input');
        const deleteBtn = container.querySelector('.delete-requirement');
        const historyBtn = container.querySelector('.history-btn');
        const historyPanel = container.querySelector('.change-history');

        titleEl.addEventListener('blur', () => {
            const newTitle = titleEl.textContent;
            if (newTitle !== req.title) {
                this.updateRequirement(req.id, { 
                    title: newTitle,
                    dateModified: new Date().toISOString(),
                    changeHistory: [...req.changeHistory, {
                        type: 'title_changed',
                        timestamp: new Date().toISOString(),
                        userId: this.currentUserId,
                        details: `Title changed from "${req.title}" to "${newTitle}"`
                    }]
                });
            }
        });

        descEl.addEventListener('blur', () => {
            const newDesc = descEl.textContent;
            if (newDesc !== req.description) {
                this.updateRequirement(req.id, { 
                    description: newDesc,
                    dateModified: new Date().toISOString(),
                    changeHistory: [...req.changeHistory, {
                        type: 'description_changed',
                        timestamp: new Date().toISOString(),
                        userId: this.currentUserId,
                        details: 'Description updated'
                    }]
                });
            }
        });

        importanceSelect.addEventListener('change', () => {
            const newImportance = importanceSelect.value;
            this.updateRequirement(req.id, { 
                importance: newImportance,
                dateModified: new Date().toISOString(),
                changeHistory: [...req.changeHistory, {
                    type: 'importance_changed',
                    timestamp: new Date().toISOString(),
                    userId: this.currentUserId,
                    details: `Importance changed to ${newImportance}`
                }]
            });
        });

        categorySelect.addEventListener('change', () => {
            const newCategory = categorySelect.value;
            this.updateRequirement(req.id, { 
                category: newCategory,
                dateModified: new Date().toISOString(),
                changeHistory: [...req.changeHistory, {
                    type: 'category_changed',
                    timestamp: new Date().toISOString(),
                    userId: this.currentUserId,
                    details: `Category changed to ${newCategory}`
                }]
            });
        });

        tagInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.target.value.trim()) {
                const newTag = e.target.value.trim();
                if (!req.tags.includes(newTag)) {
                    this.updateRequirement(req.id, { 
                        tags: [...req.tags, newTag],
                        dateModified: new Date().toISOString(),
                        changeHistory: [...req.changeHistory, {
                            type: 'tag_added',
                            timestamp: new Date().toISOString(),
                            userId: this.currentUserId,
                            details: `Tag "${newTag}" added`
                        }]
                    });
                }
                e.target.value = '';
            }
        });

        historyBtn.addEventListener('click', () => {
            historyPanel.classList.toggle('hidden');
        });

        deleteBtn.addEventListener('click', () => this.deleteRequirement(req.id));

        return container;
    }

    updateRequirement(id, updates) {
        const index = this.requirements.findIndex(r => r.id === id);
        if (index !== -1) {
            const oldReq = this.requirements[index];
            
            // Create change history entry
            const changes = Object.entries(updates)
                .filter(([key]) => key !== 'changeHistory' && key !== 'dateModified')
                .map(([key, value]) => {
                    if (key === 'tags') {
                        return `tags updated`;
                    } else {
                        return `${key} changed from "${oldReq[key]}" to "${value}"`;
                    }
                })
                .join(', ');

            const historyEntry = {
                type: 'modified',
                timestamp: new Date().toISOString(),
                userId: this.currentUserId,
                details: changes
            };

            // Update the requirement
            this.requirements[index] = {
                ...oldReq,
                ...updates,
                dateModified: new Date().toISOString(),
                changeHistory: [...(oldReq.changeHistory || []), historyEntry]
            };

            this.renderRequirements();
        }
    }

    addNewRequirement() {
        const newReq = this.enrichRequirement({
            title: 'New Requirement',
            description: 'Add description here...',
            importance: 'medium',
            category: 'uncategorized',
            tags: []
        }, true);
        
        this.requirements.push(newReq);
        this.renderRequirements();
        
        // Focus on the title of the new requirement
        const newReqElement = this.requirementsList.lastElementChild;
        if (newReqElement) {
            const titleEl = newReqElement.querySelector('.requirement-title');
            titleEl.focus();
            document.execCommand('selectAll', false, null);
        }
    }
    
    deleteRequirement(id) {
        this.requirements = this.requirements.filter(r => r.id !== id);
        this.renderRequirements();
    }

    showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator';
        indicator.id = 'typing-indicator';
        indicator.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        this.chatMessages.appendChild(indicator);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    hideTypingIndicator() {
        const indicator = document.getElementById('typing-indicator');
        if (indicator) {
            indicator.remove();
        }
    }

    async processMessage(message) {
        this.addUserMessage(message);
        this.chatInput.value = '';
        
        // Show typing indicator
        this.showTypingIndicator();
        
        try {
            const input = {
                message,
                currentRequirements: this.requirements,
                chatHistory: this.conversation_history,
                initialContext: this.initialContext
            }
            console.log('Sending message to server:', input);
            const response = await fetch('/api/chat/requirements', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(input)
            });
            
            const data = await response.json();
            
            // Hide typing indicator before showing response
            this.hideTypingIndicator();
            
            if (data.response) {
                this.addAgentMessage(data.response);
            }
            
            if (data.requirements) {
                // Enrich any new requirements with metadata
                this.requirements = data.requirements.map(req => this.enrichRequirement(req));
                this.renderRequirements();
            }
        } catch (error) {
            // Hide typing indicator on error
            this.hideTypingIndicator();
            console.error('Error processing message:', error);
            this.addAgentMessage('Sorry, there was an error processing your message. Please try again.');
        }
    }
    
    addUserMessage(message) {
        const messageEl = document.createElement('div');
        messageEl.className = 'chat-message user-message';
        messageEl.textContent = message;
        this.chatMessages.appendChild(messageEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        
        // Add to conversation history
        this.conversation_history.push({
            role: 'user',
            content: message
        });
    }
    
    addAgentMessage(message) {
        const messageEl = document.createElement('div');
        messageEl.className = 'chat-message agent-message';
        messageEl.textContent = message;
        this.chatMessages.appendChild(messageEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        
        // Add to conversation history
        this.conversation_history.push({
            role: 'assistant',
            content: message
        });
    }
}

// Initialize the requirements manager when the page loads
window.requirementsManager = new RequirementsManager();
